{"version":3,"sources":["Datos.js","Listado.js","App.js","serviceWorker.js","index.js"],"names":["Datos","dato","birthDate","moment","format","now","age","diff","parseInt","className","firstName","Listado","people","console","log","map","App","useState","show","setShow","setPeople","useEffect","a","fetch","then","res","json","response","catch","err","request","style","width","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uNA2BeA,EAxBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACTC,EAAYC,IAAOF,EAAKC,WAAWE,OAAO,cAC1CC,EAAMF,MAASC,OAAO,cACtBE,EAAMH,IAAOE,GAAKD,OAAO,QAAUD,IAAOD,GAAWE,OAAO,QAG5DG,EAF6D,GAA3CC,SAASL,IAAOD,GAAWE,OAAO,OAAcI,SAASL,IAAOD,GAAWE,OAAO,QAC/C,GAArCI,SAASL,IAAOE,GAAKD,OAAO,OAAcI,SAASL,IAAOE,GAAKD,OAAO,QAG1F,OACI,yBAAKK,UAAU,kCACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,gCAAgCR,EAAKS,WAClD,mDAAyBR,GACzB,oCAAUI,EAAV,YACCC,EAAO,EACF,+CAAqBA,EAAO,IAA5B,SACA,+CAAqBA,EAArB,YCFPI,EAbC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEf,OADAC,QAAQC,IAAIF,GAER,yBAAKH,UAAU,sCACVG,EAAOG,KAAI,SAAAd,GAAI,OACZ,kBAAC,EAAD,CACIA,KAAMA,SCuCXe,MA9Cf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENL,EAFM,KAEEQ,EAFF,KAoBb,OAhBAC,qBAAU,YACG,uCAAG,sBAAAC,EAAA,sEACNC,MAAM,kDACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLP,EAAUO,EAASf,WAEpBgB,OAAM,SAACC,GACNhB,QAAQC,IAAIe,MAPJ,2CAAH,qDAUXC,KAEC,IAID,yBAAKrB,UAAU,yBACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,MAAMsB,MAAO,CAAEC,MAAO,UACnC,wBAAIvB,UAAU,eAAd,cACA,4BACEA,UAAU,+CACVwB,QAAS,WACPd,GAASD,KAHb,8BASF,yBAAKT,UAAU,SACZS,EACC,kBAAC,EAAD,CACEN,OAAQA,IACL,SC7BGsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.7659802f.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nconst Datos = ({ dato }) => {\n    let birthDate = moment(dato.birthDate).format(\"MM/DD/YYYY\");\n    let now = moment().format(\"MM/DD/YYYY\");\n    let age = moment(now).format(\"YYYY\") - moment(birthDate).format(\"YYYY\");\n    let remainingBirth = (parseInt(moment(birthDate).format(\"MM\")) * 30 + parseInt(moment(birthDate).format(\"DD\")));\n    let remainingNow = (parseInt(moment(now).format(\"MM\")) * 30 + parseInt(moment(now).format(\"DD\")));\n    let diff = (remainingBirth - remainingNow);\n\n    return (\n        <div className=\" card shadow bg-info mt-5 mr-5\">\n            <div className=\"card-body\">\n                <p className=\"font-weight-bold text-center\">{dato.firstName}</p>\n                <p>Fecha de nacimiento: {birthDate}</p>\n                <p>Edad: {age} a√±os</p>\n                {diff < 0\n                    ? <p>Tiempo restante: {diff + 365} dias</p>\n                    : <p>Tiempo restante: {diff} dias</p>\n                }\n            </div>\n        </div>\n\n    );\n}\n\nexport default Datos;","import React from 'react';\nimport Datos from \"./Datos\";\n\n\nconst Listado = ({ people }) => {\n    console.log(people)\n    return (\n        <div className=\"row justify-content-md-center mt-5\">\n            {people.map(dato => (\n                <Datos\n                    dato={dato}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default Listado;","import React, { useState, useEffect } from 'react';\nimport Listado from \"./Listado\";\n\nfunction App() {\n  const [show, setShow] = useState(false);\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    let request = async () => {\n      await fetch(\"https://stolzz0613.github.io/jsons/people.json\")\n        .then(res => res.json())\n        .then((response) => {\n          setPeople(response.people);\n        })\n        .catch((err) => {\n          console.log(err);\n        })\n    }\n    request();\n\n  }, [])\n\n\n  return (\n    <div className=\"container p-5 mx-auto\">\n      <div className=\"row align-items-center mx-lg-n5\">\n        <div className=\"col\" style={{ width: \"200px\" }}>\n          <h1 className=\"text-center\"> Personas </h1>\n          <button\n            className=\"btn btn-primary shadow col align-self-center\"\n            onClick={() => {\n              setShow(!show)\n            }}\n          >\n            Mostrar / Ocultar Nombres\n          </button>\n        </div>\n        <div className=\"w-100\">\n          {show ?\n            <Listado\n              people={people}\n            /> : null\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}